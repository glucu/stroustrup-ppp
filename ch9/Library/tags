!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/glucu/dev/programming-principles-and-practice-using-cpp/ch9/Library/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/a4d751bc/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
BOOK_HPP	book/Book.hpp	/^#define BOOK_HPP$/;"	d
BOOK_HPP	lib/Book.hpp	/^#define BOOK_HPP$/;"	d
Book	book/Book.cpp	/^Book::Book(const string &i, const string &t, const string &a, Genre g, const Chrono::Date &cry)$/;"	f	class:my_lib::Book
Book	book/Book.hpp	/^class Book$/;"	c	namespace:my_lib
Book	lib/Book.cpp	/^Book::Book(const string &i, const string &t, const string &a, Genre g, const Chrono::Date &cry)$/;"	f	class:my_lib::Book
Book	lib/Book.hpp	/^class Book$/;"	c	namespace:my_lib
CHRONO_HPP	book/Chrono.hpp	/^#define CHRONO_HPP$/;"	d
CHRONO_HPP	lib/Chrono.hpp	/^#define CHRONO_HPP$/;"	d
CHRONO_HPP	patron/Chrono.hpp	/^#define CHRONO_HPP$/;"	d
Chrono	book/Chrono.cpp	/^namespace Chrono {$/;"	n	file:
Chrono	book/Chrono.hpp	/^namespace Chrono {$/;"	n
Chrono	lib/Chrono.cpp	/^namespace Chrono {$/;"	n	file:
Chrono	lib/Chrono.hpp	/^namespace Chrono {$/;"	n
Chrono	patron/Chrono.cpp	/^namespace Chrono {$/;"	n	file:
Chrono	patron/Chrono.hpp	/^namespace Chrono {$/;"	n
Date	book/Chrono.cpp	/^Date::Date()$/;"	f	class:Chrono::Date
Date	book/Chrono.cpp	/^Date::Date(int yy, Month mm, int dd)$/;"	f	class:Chrono::Date
Date	book/Chrono.hpp	/^class Date {$/;"	c	namespace:Chrono
Date	lib/Chrono.cpp	/^Date::Date()$/;"	f	class:Chrono::Date
Date	lib/Chrono.cpp	/^Date::Date(int yy, Month mm, int dd)$/;"	f	class:Chrono::Date
Date	lib/Chrono.hpp	/^class Date {$/;"	c	namespace:Chrono
Date	patron/Chrono.cpp	/^Date::Date()$/;"	f	class:Chrono::Date
Date	patron/Chrono.cpp	/^Date::Date(int yy, Month mm, int dd)$/;"	f	class:Chrono::Date
Date	patron/Chrono.hpp	/^class Date {$/;"	c	namespace:Chrono
Day	book/Chrono.cpp	/^enum Day {$/;"	g	namespace:Chrono	file:
Day	lib/Chrono.cpp	/^enum Day {$/;"	g	namespace:Chrono	file:
Day	patron/Chrono.cpp	/^enum Day {$/;"	g	namespace:Chrono	file:
Genre	book/Book.hpp	/^    enum class Genre {$/;"	g	class:my_lib::Book
Genre	lib/Book.hpp	/^    enum class Genre {$/;"	g	class:my_lib::Book
Invalid	book/Chrono.hpp	/^    class Invalid { };                 \/\/ to throw as exception$/;"	c	class:Chrono::Date
Invalid	lib/Chrono.hpp	/^    class Invalid { };                 \/\/ to throw as exception$/;"	c	class:Chrono::Date
Invalid	patron/Chrono.hpp	/^    class Invalid { };                 \/\/ to throw as exception$/;"	c	class:Chrono::Date
LIBRARY_HPP	lib/Library.hpp	/^#define LIBRARY_HPP$/;"	d
Library	lib/Library.cpp	/^Library::Library() {} $/;"	f	class:my_lib::Library
Library	lib/Library.hpp	/^class Library {$/;"	c	namespace:my_lib
Month	book/Chrono.hpp	/^    enum Month {$/;"	g	class:Chrono::Date
Month	lib/Chrono.hpp	/^    enum Month {$/;"	g	class:Chrono::Date
Month	patron/Chrono.hpp	/^    enum Month {$/;"	g	class:Chrono::Date
PATRON_HPP	lib/Patron.hpp	/^#define PATRON_HPP$/;"	d
PATRON_HPP	patron/Patron.hpp	/^#define PATRON_HPP$/;"	d
Patron	lib/Patron.cpp	/^Patron::Patron(const string &name, unsigned lib_card)$/;"	f	class:my_lib::Patron
Patron	lib/Patron.hpp	/^class Patron {$/;"	c	namespace:my_lib
Patron	patron/Patron.cpp	/^Patron::Patron(const string &name, unsigned lib_card)$/;"	f	class:my_lib::Patron
Patron	patron/Patron.hpp	/^class Patron {$/;"	c	namespace:my_lib
Transactions	lib/Library.hpp	/^  struct Transactions {$/;"	s	class:my_lib::Library
add_book	lib/Library.cpp	/^void Library::add_book(const Book &b)$/;"	f	class:my_lib::Library	typeref:typename:void
add_book	lib/main.cpp	/^void add_book(Library &lib, const Book &b)$/;"	f	typeref:typename:void
add_day	book/Chrono.cpp	/^void Date:: add_day(int n)$/;"	f	class:Chrono::Date	typeref:typename:void
add_day	lib/Chrono.cpp	/^void Date:: add_day(int n)$/;"	f	class:Chrono::Date	typeref:typename:void
add_day	patron/Chrono.cpp	/^void Date:: add_day(int n)$/;"	f	class:Chrono::Date	typeref:typename:void
add_month	book/Chrono.cpp	/^void Date::add_month(int n)$/;"	f	class:Chrono::Date	typeref:typename:void
add_month	lib/Chrono.cpp	/^void Date::add_month(int n)$/;"	f	class:Chrono::Date	typeref:typename:void
add_month	patron/Chrono.cpp	/^void Date::add_month(int n)$/;"	f	class:Chrono::Date	typeref:typename:void
add_patron	lib/Library.cpp	/^void Library::add_patron(const Patron &p)$/;"	f	class:my_lib::Library	typeref:typename:void
add_patron	lib/main.cpp	/^void add_patron(Library &lib, const Patron &p)$/;"	f	typeref:typename:void
add_year	book/Chrono.cpp	/^void Date::add_year(int n)$/;"	f	class:Chrono::Date	typeref:typename:void
add_year	lib/Chrono.cpp	/^void Date::add_year(int n)$/;"	f	class:Chrono::Date	typeref:typename:void
add_year	patron/Chrono.cpp	/^void Date::add_year(int n)$/;"	f	class:Chrono::Date	typeref:typename:void
apr	book/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
apr	lib/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
apr	patron/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
aug	book/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
aug	lib/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
aug	patron/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
author	book/Book.cpp	/^const string& Book::author() const$/;"	f	class:my_lib::Book	typeref:typename:const string &
author	lib/Book.cpp	/^const string& Book::author() const$/;"	f	class:my_lib::Book	typeref:typename:const string &
book	lib/Library.cpp	/^Book& Library::book(const Book &book)$/;"	f	class:my_lib::Library	typeref:typename:Book &
book	lib/Library.hpp	/^    Book book;$/;"	m	struct:my_lib::Library::Transactions	typeref:typename:Book
books	lib/Library.cpp	/^const vector<Book>& Library::books() const$/;"	f	class:my_lib::Library	typeref:typename:const vector<Book> &
check_in	book/Book.cpp	/^void Book::check_in()$/;"	f	class:my_lib::Book	typeref:typename:void
check_in	lib/Book.cpp	/^void Book::check_in()$/;"	f	class:my_lib::Book	typeref:typename:void
check_out	book/Book.cpp	/^void Book::check_out() $/;"	f	class:my_lib::Book	typeref:typename:void
check_out	lib/Book.cpp	/^void Book::check_out() $/;"	f	class:my_lib::Book	typeref:typename:void
check_out	lib/Library.cpp	/^void Library::check_out(const Book &b, const Patron &p, const Chrono::Date &d) $/;"	f	class:my_lib::Library	typeref:typename:void
check_out	lib/main.cpp	/^void check_out(Library &lib, const Book &b, const Patron &p, const Date &d)$/;"	f	typeref:typename:void
copyright_year	book/Book.cpp	/^const Chrono::Date& Book::copyright_year() const$/;"	f	class:my_lib::Book	typeref:typename:const Chrono::Date &
copyright_year	lib/Book.cpp	/^const Chrono::Date& Book::copyright_year() const$/;"	f	class:my_lib::Book	typeref:typename:const Chrono::Date &
d	book/Chrono.hpp	/^    int   d;$/;"	m	class:Chrono::Date	typeref:typename:int
d	lib/Chrono.hpp	/^    int   d;$/;"	m	class:Chrono::Date	typeref:typename:int
d	patron/Chrono.hpp	/^    int   d;$/;"	m	class:Chrono::Date	typeref:typename:int
date	lib/Library.hpp	/^    Chrono::Date date;$/;"	m	struct:my_lib::Library::Transactions	typeref:typename:Chrono::Date
day	book/Chrono.hpp	/^    int   day()   const { return d; }$/;"	f	class:Chrono::Date	typeref:typename:int
day	lib/Chrono.hpp	/^    int   day()   const { return d; }$/;"	f	class:Chrono::Date	typeref:typename:int
day	patron/Chrono.hpp	/^    int   day()   const { return d; }$/;"	f	class:Chrono::Date	typeref:typename:int
day_of_week	book/Chrono.cpp	/^Day day_of_week(const Date& d)$/;"	f	namespace:Chrono	typeref:typename:Day
day_of_week	lib/Chrono.cpp	/^Day day_of_week(const Date& d)$/;"	f	namespace:Chrono	typeref:typename:Day
day_of_week	patron/Chrono.cpp	/^Day day_of_week(const Date& d)$/;"	f	namespace:Chrono	typeref:typename:Day
dec	book/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
dec	lib/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
dec	patron/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
default_date	book/Chrono.cpp	/^const Date& default_date()$/;"	f	namespace:Chrono	typeref:typename:const Date &
default_date	lib/Chrono.cpp	/^const Date& default_date()$/;"	f	namespace:Chrono	typeref:typename:const Date &
default_date	patron/Chrono.cpp	/^const Date& default_date()$/;"	f	namespace:Chrono	typeref:typename:const Date &
feb	book/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
feb	lib/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
feb	patron/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
fees	lib/Patron.cpp	/^double Patron::fees() const$/;"	f	class:my_lib::Patron	typeref:typename:double
fees	patron/Patron.cpp	/^double Patron::fees() const$/;"	f	class:my_lib::Patron	typeref:typename:double
friday	book/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
friday	lib/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
friday	patron/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
genre	book/Book.cpp	/^const string& Book::genre() const$/;"	f	class:my_lib::Book	typeref:typename:const string &
genre	lib/Book.cpp	/^const string& Book::genre() const$/;"	f	class:my_lib::Book	typeref:typename:const string &
initialize_books	lib/main.cpp	/^void initialize_books(Library &lib)$/;"	f	typeref:typename:void
initialize_check_out	lib/main.cpp	/^void initialize_check_out(Library &lib)$/;"	f	typeref:typename:void
initialize_patrons	lib/main.cpp	/^void initialize_patrons(Library &lib)$/;"	f	typeref:typename:void
is_book	lib/Library.cpp	/^bool Library::is_book(const Book &book) const $/;"	f	class:my_lib::Library	typeref:typename:bool
is_checked	book/Book.cpp	/^bool Book::is_checked() const$/;"	f	class:my_lib::Book	typeref:typename:bool
is_checked	lib/Book.cpp	/^bool Book::is_checked() const$/;"	f	class:my_lib::Book	typeref:typename:bool
is_checked_out	lib/Library.cpp	/^bool Library::is_checked_out(const Book &book) const$/;"	f	class:my_lib::Library	typeref:typename:bool
is_date	book/Chrono.cpp	/^bool is_date(int y, Date::Month m, int d)$/;"	f	namespace:Chrono	typeref:typename:bool
is_date	lib/Chrono.cpp	/^bool is_date(int y, Date::Month m, int d)$/;"	f	namespace:Chrono	typeref:typename:bool
is_date	patron/Chrono.cpp	/^bool is_date(int y, Date::Month m, int d)$/;"	f	namespace:Chrono	typeref:typename:bool
is_isbn	book/Book.cpp	/^bool Book::is_isbn(const string &isbn) const$/;"	f	class:my_lib::Book	typeref:typename:bool
is_isbn	lib/Book.cpp	/^bool Book::is_isbn(const string &isbn) const$/;"	f	class:my_lib::Book	typeref:typename:bool
is_patron	lib/Library.cpp	/^bool Library::is_patron(const Patron &patron) const$/;"	f	class:my_lib::Library	typeref:typename:bool
isbn	book/Book.cpp	/^const string& Book::isbn() const$/;"	f	class:my_lib::Book	typeref:typename:const string &
isbn	lib/Book.cpp	/^const string& Book::isbn() const$/;"	f	class:my_lib::Book	typeref:typename:const string &
jan	book/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
jan	lib/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
jan	patron/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
jul	book/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
jul	lib/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
jul	patron/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
jun	book/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
jun	lib/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
jun	patron/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
kBiography	book/Book.hpp	/^        kBiography,$/;"	e	enum:my_lib::Book::Genre
kBiography	lib/Book.hpp	/^        kBiography,$/;"	e	enum:my_lib::Book::Genre
kChildren	book/Book.hpp	/^        kChildren$/;"	e	enum:my_lib::Book::Genre
kChildren	lib/Book.hpp	/^        kChildren$/;"	e	enum:my_lib::Book::Genre
kFiction	book/Book.hpp	/^        kFiction,$/;"	e	enum:my_lib::Book::Genre
kFiction	lib/Book.hpp	/^        kFiction,$/;"	e	enum:my_lib::Book::Genre
kNonFiction	book/Book.hpp	/^        kNonFiction,$/;"	e	enum:my_lib::Book::Genre
kNonFiction	lib/Book.hpp	/^        kNonFiction,$/;"	e	enum:my_lib::Book::Genre
kPeriodical	book/Book.hpp	/^        kPeriodical,$/;"	e	enum:my_lib::Book::Genre
kPeriodical	lib/Book.hpp	/^        kPeriodical,$/;"	e	enum:my_lib::Book::Genre
leapyear	book/Chrono.cpp	/^bool leapyear(int y)$/;"	f	namespace:Chrono	typeref:typename:bool
leapyear	lib/Chrono.cpp	/^bool leapyear(int y)$/;"	f	namespace:Chrono	typeref:typename:bool
leapyear	patron/Chrono.cpp	/^bool leapyear(int y)$/;"	f	namespace:Chrono	typeref:typename:bool
lib_card	lib/Patron.cpp	/^unsigned Patron::lib_card() const$/;"	f	class:my_lib::Patron	typeref:typename:unsigned
lib_card	patron/Patron.cpp	/^unsigned Patron::lib_card() const$/;"	f	class:my_lib::Patron	typeref:typename:unsigned
m	book/Chrono.hpp	/^    Month m;$/;"	m	class:Chrono::Date	typeref:typename:Month
m	lib/Chrono.hpp	/^    Month m;$/;"	m	class:Chrono::Date	typeref:typename:Month
m	patron/Chrono.hpp	/^    Month m;$/;"	m	class:Chrono::Date	typeref:typename:Month
m_author_	book/Book.hpp	/^    string m_author_;$/;"	m	class:my_lib::Book	typeref:typename:string
m_author_	lib/Book.hpp	/^    string m_author_;$/;"	m	class:my_lib::Book	typeref:typename:string
m_books_	lib/Library.hpp	/^  vector<Book> m_books_;$/;"	m	class:my_lib::Library	typeref:typename:vector<Book>
m_copyright_year_	book/Book.hpp	/^    Chrono::Date m_copyright_year_;$/;"	m	class:my_lib::Book	typeref:typename:Chrono::Date
m_copyright_year_	lib/Book.hpp	/^    Chrono::Date m_copyright_year_;$/;"	m	class:my_lib::Book	typeref:typename:Chrono::Date
m_fees_	lib/Patron.hpp	/^  double m_fees_;$/;"	m	class:my_lib::Patron	typeref:typename:double
m_fees_	patron/Patron.hpp	/^  double m_fees_;$/;"	m	class:my_lib::Patron	typeref:typename:double
m_genre_	book/Book.hpp	/^    Genre m_genre_;$/;"	m	class:my_lib::Book	typeref:typename:Genre
m_genre_	lib/Book.hpp	/^    Genre m_genre_;$/;"	m	class:my_lib::Book	typeref:typename:Genre
m_is_checked_	book/Book.hpp	/^    bool m_is_checked_;$/;"	m	class:my_lib::Book	typeref:typename:bool
m_is_checked_	lib/Book.hpp	/^    bool m_is_checked_;$/;"	m	class:my_lib::Book	typeref:typename:bool
m_isbn_	book/Book.hpp	/^    string m_isbn_;$/;"	m	class:my_lib::Book	typeref:typename:string
m_isbn_	lib/Book.hpp	/^    string m_isbn_;$/;"	m	class:my_lib::Book	typeref:typename:string
m_lib_card_	lib/Patron.hpp	/^  unsigned m_lib_card_;$/;"	m	class:my_lib::Patron	typeref:typename:unsigned
m_lib_card_	patron/Patron.hpp	/^  unsigned m_lib_card_;$/;"	m	class:my_lib::Patron	typeref:typename:unsigned
m_name_	lib/Patron.hpp	/^  string m_name_;$/;"	m	class:my_lib::Patron	typeref:typename:string
m_name_	patron/Patron.hpp	/^  string m_name_;$/;"	m	class:my_lib::Patron	typeref:typename:string
m_patrons_	lib/Library.hpp	/^  vector<Patron> m_patrons_;$/;"	m	class:my_lib::Library	typeref:typename:vector<Patron>
m_title_	book/Book.hpp	/^    string m_title_;$/;"	m	class:my_lib::Book	typeref:typename:string
m_title_	lib/Book.hpp	/^    string m_title_;$/;"	m	class:my_lib::Book	typeref:typename:string
m_transactions_	lib/Library.hpp	/^  vector<Transactions> m_transactions_;$/;"	m	class:my_lib::Library	typeref:typename:vector<Transactions>
main	book/main.cpp	/^int main()$/;"	f	typeref:typename:int
main	lib/main.cpp	/^int main()$/;"	f	typeref:typename:int
main	patron/main.cpp	/^int main()$/;"	f	typeref:typename:int
mar	book/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
mar	lib/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
mar	patron/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
may	book/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
may	lib/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
may	patron/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
monday	book/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
monday	lib/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
monday	patron/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
month	book/Chrono.hpp	/^    Month month() const { return m; }$/;"	f	class:Chrono::Date	typeref:typename:Month
month	lib/Chrono.hpp	/^    Month month() const { return m; }$/;"	f	class:Chrono::Date	typeref:typename:Month
month	patron/Chrono.hpp	/^    Month month() const { return m; }$/;"	f	class:Chrono::Date	typeref:typename:Month
my_lib	book/Book.cpp	/^namespace my_lib {$/;"	n	file:
my_lib	book/Book.hpp	/^namespace my_lib {$/;"	n
my_lib	lib/Book.cpp	/^namespace my_lib {$/;"	n	file:
my_lib	lib/Book.hpp	/^namespace my_lib {$/;"	n
my_lib	lib/Library.cpp	/^namespace my_lib {$/;"	n	file:
my_lib	lib/Library.hpp	/^namespace my_lib {$/;"	n
my_lib	lib/Patron.cpp	/^namespace my_lib {$/;"	n	file:
my_lib	lib/Patron.hpp	/^namespace my_lib {$/;"	n
my_lib	patron/Patron.cpp	/^namespace my_lib {$/;"	n	file:
my_lib	patron/Patron.hpp	/^namespace my_lib {$/;"	n
name	lib/Patron.cpp	/^const string& Patron::name() const$/;"	f	class:my_lib::Patron	typeref:typename:const string &
name	patron/Patron.cpp	/^const string& Patron::name() const$/;"	f	class:my_lib::Patron	typeref:typename:const string &
next_Sunday	book/Chrono.cpp	/^Date next_Sunday(const Date& d)$/;"	f	namespace:Chrono	typeref:typename:Date
next_Sunday	lib/Chrono.cpp	/^Date next_Sunday(const Date& d)$/;"	f	namespace:Chrono	typeref:typename:Date
next_Sunday	patron/Chrono.cpp	/^Date next_Sunday(const Date& d)$/;"	f	namespace:Chrono	typeref:typename:Date
next_weekday	book/Chrono.cpp	/^Date next_weekday(const Date& d)$/;"	f	namespace:Chrono	typeref:typename:Date
next_weekday	lib/Chrono.cpp	/^Date next_weekday(const Date& d)$/;"	f	namespace:Chrono	typeref:typename:Date
next_weekday	patron/Chrono.cpp	/^Date next_weekday(const Date& d)$/;"	f	namespace:Chrono	typeref:typename:Date
nov	book/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
nov	lib/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
nov	patron/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
oct	book/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
oct	lib/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
oct	patron/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
operator !=	book/Book.cpp	/^bool operator!=(const Book &lhs, const Book &rhs)$/;"	f	namespace:my_lib	typeref:typename:bool
operator !=	book/Chrono.cpp	/^bool operator!=(const Date& a, const Date& b)$/;"	f	namespace:Chrono	typeref:typename:bool
operator !=	lib/Book.cpp	/^bool operator!=(const Book &lhs, const Book &rhs)$/;"	f	namespace:my_lib	typeref:typename:bool
operator !=	lib/Chrono.cpp	/^bool operator!=(const Date& a, const Date& b)$/;"	f	namespace:Chrono	typeref:typename:bool
operator !=	patron/Chrono.cpp	/^bool operator!=(const Date& a, const Date& b)$/;"	f	namespace:Chrono	typeref:typename:bool
operator <<	book/Book.cpp	/^ostream& operator<<(ostream &os, const Book &book)$/;"	f	namespace:my_lib	typeref:typename:ostream &
operator <<	book/Chrono.cpp	/^ostream& operator<<(ostream& os, const Date& d)$/;"	f	namespace:Chrono	typeref:typename:ostream &
operator <<	lib/Book.cpp	/^ostream& operator<<(ostream &os, const Book &book)$/;"	f	namespace:my_lib	typeref:typename:ostream &
operator <<	lib/Chrono.cpp	/^ostream& operator<<(ostream& os, const Date& d)$/;"	f	namespace:Chrono	typeref:typename:ostream &
operator <<	lib/Library.cpp	/^ostream& operator<<(ostream &os, const Library &l)$/;"	f	namespace:my_lib	typeref:typename:ostream &
operator <<	lib/Patron.cpp	/^ostream& operator<<(ostream &os, const Patron &p)$/;"	f	namespace:my_lib	typeref:typename:ostream &
operator <<	patron/Chrono.cpp	/^ostream& operator<<(ostream& os, const Date& d)$/;"	f	namespace:Chrono	typeref:typename:ostream &
operator <<	patron/Patron.cpp	/^ostream& operator<<(ostream &os, const Patron &p)$/;"	f	namespace:my_lib	typeref:typename:ostream &
operator ==	book/Book.cpp	/^bool operator==(const Book &lhs, const Book &rhs)$/;"	f	namespace:my_lib	typeref:typename:bool
operator ==	book/Chrono.cpp	/^bool operator==(const Date& a, const Date& b)$/;"	f	namespace:Chrono	typeref:typename:bool
operator ==	lib/Book.cpp	/^bool operator==(const Book &lhs, const Book &rhs)$/;"	f	namespace:my_lib	typeref:typename:bool
operator ==	lib/Chrono.cpp	/^bool operator==(const Date& a, const Date& b)$/;"	f	namespace:Chrono	typeref:typename:bool
operator ==	patron/Chrono.cpp	/^bool operator==(const Date& a, const Date& b)$/;"	f	namespace:Chrono	typeref:typename:bool
operator >>	book/Chrono.cpp	/^istream& operator>>(istream& is, Date& dd)$/;"	f	namespace:Chrono	typeref:typename:istream &
operator >>	lib/Chrono.cpp	/^istream& operator>>(istream& is, Date& dd)$/;"	f	namespace:Chrono	typeref:typename:istream &
operator >>	patron/Chrono.cpp	/^istream& operator>>(istream& is, Date& dd)$/;"	f	namespace:Chrono	typeref:typename:istream &
owes_fee	lib/Library.cpp	/^bool Library::owes_fee(const Patron &p) const$/;"	f	class:my_lib::Library	typeref:typename:bool
owes_fee	lib/Patron.cpp	/^bool Patron::owes_fee() const$/;"	f	class:my_lib::Patron	typeref:typename:bool
owes_fee	patron/Patron.cpp	/^bool Patron::owes_fee() const$/;"	f	class:my_lib::Patron	typeref:typename:bool
parse_genre	book/Book.cpp	/^const string& Book::parse_genre() const$/;"	f	class:my_lib::Book	typeref:typename:const string &
parse_genre	lib/Book.cpp	/^const string& Book::parse_genre() const$/;"	f	class:my_lib::Book	typeref:typename:const string &
patron	lib/Library.cpp	/^Patron& Library::patron(const Patron &patron)$/;"	f	class:my_lib::Library	typeref:typename:Patron &
patron	lib/Library.hpp	/^    Patron patron;$/;"	m	struct:my_lib::Library::Transactions	typeref:typename:Patron
patron_fees	lib/Library.cpp	/^const vector<string> Library::patron_fees() const$/;"	f	class:my_lib::Library	typeref:typename:const vector<string>
patrons	lib/Library.cpp	/^const vector<Patron>& Library::patrons() const$/;"	f	class:my_lib::Library	typeref:typename:const vector<Patron> &
print_book	book/main.cpp	/^void print_book(const Book &b) $/;"	f	typeref:typename:void
print_library	lib/main.cpp	/^void print_library(const Library &lib) $/;"	f	typeref:typename:void
print_patron	patron/main.cpp	/^void print_patron(const Patron &p)$/;"	f	typeref:typename:void
saturday	book/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
saturday	lib/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
saturday	patron/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
sep	book/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
sep	lib/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
sep	patron/Chrono.hpp	/^        jan=1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec$/;"	e	enum:Chrono::Date::Month
set_fee	lib/Patron.cpp	/^void Patron::set_fee(double fee) $/;"	f	class:my_lib::Patron	typeref:typename:void
set_fee	patron/Patron.cpp	/^void Patron::set_fee(double fee) $/;"	f	class:my_lib::Patron	typeref:typename:void
sunday	book/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
sunday	lib/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
sunday	patron/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
thursday	book/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
thursday	lib/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
thursday	patron/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
title	book/Book.cpp	/^const string& Book::title() const$/;"	f	class:my_lib::Book	typeref:typename:const string &
title	lib/Book.cpp	/^const string& Book::title() const$/;"	f	class:my_lib::Book	typeref:typename:const string &
tuesday	book/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
tuesday	lib/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
tuesday	patron/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
wednesday	book/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
wednesday	lib/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
wednesday	patron/Chrono.cpp	/^    sunday, monday, tuesday, wednesday, thursday, friday, saturday$/;"	e	enum:Chrono::Day	file:
y	book/Chrono.hpp	/^    int   y;$/;"	m	class:Chrono::Date	typeref:typename:int
y	lib/Chrono.hpp	/^    int   y;$/;"	m	class:Chrono::Date	typeref:typename:int
y	patron/Chrono.hpp	/^    int   y;$/;"	m	class:Chrono::Date	typeref:typename:int
year	book/Chrono.hpp	/^    int   year()  const { return y; }$/;"	f	class:Chrono::Date	typeref:typename:int
year	lib/Chrono.hpp	/^    int   year()  const { return y; }$/;"	f	class:Chrono::Date	typeref:typename:int
year	patron/Chrono.hpp	/^    int   year()  const { return y; }$/;"	f	class:Chrono::Date	typeref:typename:int
